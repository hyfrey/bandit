{"name":"Bandit","tagline":"A mulitarmed bandit based on john myles whites' \"bandit algorithms for website optimization\". Use as an in or out of band testing solution. Do monte carlo simulations of the specifc usage scenario.","body":"[![Build Status](https://travis-ci.org/purzelrakete/bandit.png?branch=master)](https://travis-ci.org/purzelrakete/bandit)\r\n[![Coverage Status](https://coveralls.io/repos/purzelrakete/bandit/badge.png)](https://coveralls.io/r/purzelrakete/bandit)\r\n\r\nA golang multiarmed bandit. Use it in your project to run A/B tests while\r\ncontrolling the tradeoff between exploring new arms and exploiting the\r\ncurrently best arm. It can be used inside a go project or from other languages\r\nthrough an HTTP API and works well on high volume websites or APIs.\r\n\r\nBandit is based on John Myles White's [Bandit Algorithms for Website\r\nOptimization](http://shop.oreilly.com/product/0636920027393.do). Full\r\ndocumentation is available [on\r\ngodoc](http://godoc.org/github.com/purzelrakete/bandit).\r\n\r\n## Try Bandit\r\n\r\nYou need at go1.1.1 or higher. Build the project by running `make`.\r\n\r\nYou can run a simple demonstration of the HTTP API with `bandit-example`.\r\nGo to http://localhost:8080/ to test the performance of squares against\r\ncircles. If you perfer circles, you should start to see more circles being\r\nserved to you over time.\r\n\r\n## When to use bandit\r\n\r\nThis library is intended to be used to instrument a high volume website or\r\na web api. It is helpful to have a logging pipeline in place.\r\n\r\n## Design\r\n\r\nA Bandit is used to select arms and update arms with reward information:\r\n\r\n```go\r\ntype Bandit interface {\r\n  SelectArm() int\r\n  Update(arm int, reward float64)\r\n}\r\n```\r\n\r\nA delayed Bandit has no Update implementation. Instead it maintains static\r\nrewards counters for each arm, and periodically updates those counters from an\r\nexternally generated snapshot.  This snapshot contains the number of arms\r\nfollowed by the mean reward for each arm:\r\n\r\n```\r\n2 0.4 0.3\r\n```\r\n\r\nYou are expected to generate this reward snapshot yourself using log\r\ninformation. If you adhere to the provided log format, you can use\r\nbandit.SnapshotMapper and bandit.SnapshotReducer to either run a hadoop\r\nstreaming job or simply pipe the two commands together in your shell. Have\r\na look at `log.go` to see the format:\r\n\r\n```\r\n2013/08/22 14:20:05 BanditSelection shape-20130822 0 shape-20130822:c8-circle\r\n2013/08/22 14:20:06 BanditReward shape-20130822 0 shape-20130822:c8-circle 1.0\r\n```\r\n\r\nTo use a bandit, you first have to define an experiment and it's variants.\r\nThis is currently configured as a tsv with name, url, tag:\r\n\r\n```\r\nshape-20130822\t1\thttp://localhost:8080/widget?shape=square\tshape-20130822:s1-square\r\nshape-20130822\t2\thttp://localhost:8080/widget?shape=circle\tshape-20130822:c8-circle\r\n```\r\n\r\n## Running experiments\r\n\r\nChoose the best method for your project depending on whether you have a client\r\nside javascript application, a go project, or a project in some other\r\nlanguage.\r\n\r\n### Javascript and the HTTP API\r\n\r\nBuild the project by running `make`, then run `bandit-api -port 80\r\n-apiExperiments experiments.tsv` to start the endpoint with the provided test\r\nexperiments.\r\n\r\nIn this scenario, the application makes a request to the api endpoint and\r\nthen a second request to your api.\r\n\r\n```\r\n   .--------------.        .-----------------.\r\n   |  javascript  | -----> | bandit HTTP API |\r\n   .--------------.        .-----------------.\r\n          |                .------------.\r\n          ---------------> |  your api  |\r\n                           .------------.\r\n```\r\n\r\nGet a variant from the HTTP API first:\r\n\r\n    GET https://api/experiements/widgets?uid=11 HTTP/1.0\r\n\r\nThe API responds with a variant:\r\n\r\n    HTTP/1.0 200 OK\r\n    Content-Type: text/json\r\n\r\n    {\r\n      uid: 11,\r\n      experiment: \"widgets\",\r\n      url: \"https://api/widget?color=blue\"\r\n      tag: \"widget-sauce-flf89\"\r\n    }\r\n\r\nThe client can now follow up with a request to the returned widget:\r\n\r\n    GET https://api/widget?color=blue HTTP/1.0\r\n\r\nSee the exampe binary and example/index.html for a running example of this.\r\n\r\n### Project in another language using the HTTP API\r\n\r\nLaunch the HTTP API as above. When you get a request to your endpoint, make\r\na backend request to the HTTP API. Use the returned variant to vary.\r\n\r\n```\r\n          .------------.       .-----------------.\r\n    ----> |  your api  | ----> | bandit HTTP API |\r\n          .------------.       .-----------------.\r\n```\r\n\r\n### Running experiments in go with the bandit library\r\n\r\nLoYou can load an experiment with an associated bandit as an Experiment.\r\n\r\n```\r\n                          .------------.\r\n       .--------.         |  snapshot  |       periodic job\r\n       | Bandit | <------ |    file    | <---  aggregates logs\r\n       .--------.         .------------.       into counters\r\n           ^\r\n           |\r\n      .------------.       .----------.\r\n      | Experiment | --*-> |  Variant |\r\n      .------------.       .----------.\r\n      | name       |       | tag      |\r\n      .------------.       | url      |\r\n                           .----------.\r\n```\r\n\r\nSet your experiment up like this:\r\n\r\n```go\r\nes, err := bandit.NewExperiments(*apiExperiments)\r\nif err != nil {\r\n\tlog.Fatalf(\"could not construct experiments: %s\", err.Error())\r\n}\r\n\r\nif err := es.InitDelayedBandit(*apiSnapshot, 2*time.Minute); err != nil {\r\n\tlog.Fatalf(\"could initialize bandits: %s\", err.Error())\r\n}\r\n\r\nm := pat.New()\r\nm.Get(\"/experiments/:name\", http.HandlerFunc(bhttp.SelectionHandler(es)))\r\nhttp.Handle(\"/\", m)\r\n\r\n// serve\r\nlog.Fatal(http.ListenAndServe(*apiBind, nil))\r\n```\r\n\r\nYou can iterate over available Variants in your endpoint setup via\r\nt.Experiment.Variants. Then begin serving requests. For example:\r\n\r\n```\r\nswitch t.Select().Tag {\r\n  case \"shape-20130822:s1-square\":\r\n    msg = \"hello square\"\r\n  case \"shape-20130822:c8-circle\":\r\n    msg = \"hello circle\"\r\n}\r\n```\r\n\r\n## Bandit Algorithms\r\n\r\nYou can currently choose between Epsilon Greedy and Softmax. See the godoc for\r\ndetailed information.\r\n\r\n## Simulation\r\n\r\nBandit includes the facility to simulate and plot experiemnts. You should run\r\nyour own simulations before putting experiments into production. See `mc.go`\r\nfor details. Too plot the provided simulations, build the project by running\r\n`make`, then run bandit-plot.\r\n\r\nHere's an example plot:\r\n\r\n![plot](https://dl.dropboxusercontent.com/u/1704851/bandit.svg)\r\n\r\n# Status\r\n\r\nThis API is currently *not stable*. Consider this a 0.0.0 release that is\r\nsubject to change at any time.\r\n\r\n## TODO\r\n\r\n- UCB1 implementation\r\n- UCB with extensions for delayed rewards\r\n- Sticky assignements\r\n\r\n# Credits\r\n\r\nDeveloped by\r\n\r\n- Rany Keddo (@purzelrakete)\r\n\r\nThanks to for advice and opinions to\r\n\r\n- John Myles White\r\n- Peter Bourgon\r\n- Josh Devins\r\n- Sean Braithwaite\r\n\r\n[1]: http://dl.acm.org/citation.cfm?id=1677012\" \"Explore/Exploit Schemes for Web Content Optimzation\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}