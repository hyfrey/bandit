{"name":"Bandit","tagline":"A mulitarmed bandit to A/B test go projects, or other languages via an HTTP API. It uses a log based data flow. Based on John Myles Whites' book \"Bandit Algorithms for Website Optimization\"","body":"A mulitarmed bandit to A/B test go projects, or other languages via an HTTP\r\nAPI. It uses a log based data flow. Based on John Myles White's [Bandit\r\nAlgorithms for Website\r\nOptimization](http://shop.oreilly.com/product/0636920027393.do). Full\r\ndocumentation is available [on\r\ngodoc](http://godoc.org/github.com/purzelrakete/bandit).\r\n\r\nBuild bandit with `make`. You need >= go 1.1.1..\r\n\r\n## Try Bandit\r\n\r\n`bandit-example` runs a toy demonstration of the HTTP API which you can see at\r\nhttp://localhost:8080:\r\n\r\n![example](http://goo.gl/oaCF3o)\r\n\r\n## Data Flow\r\n\r\nBandit operates a delayed bandit with log data. This means that reward data\r\n(ie clickthroughs) do not reach the bandit in real time. Instead they are\r\naggregated into snapshots by bandit-job. Each bandit instance then polls for\r\nthis snapshot periodically.\r\n\r\n```\r\n              select\r\n  bandit     ----->       log       --->  bandit-job\r\n  instance    reward      storage         perodically writes\r\n    ^        ----->                            |\r\n    |                                          |\r\n    .-----------------  snapshot <-------------.\r\n        bandit polls\r\n```\r\n\r\n`bandit-job` expects log lines in the following format:\r\n\r\n```\r\n1379257984 BanditSelection shape-20130822:1\r\n1379257987 BanditReward shape-20130822:1 0.000000\r\n```\r\n\r\nNotice that the reward line includes the variant Tag. It is up to you to\r\ntransport this tag through your system.\r\n\r\n## Types\r\n\r\nA Bandit is used to select arms and update arms with reward information:\r\n\r\n```go\r\ntype Bandit interface {\r\n  SelectArm() int\r\n  Update(arm int, reward float64)\r\n}\r\n```\r\n\r\nYou will probably not use bandits directly. Instead, a Bandit is put to work\r\ninside an Experiment. You set up experiments (ie signup form buttons) with as\r\nmany variants as you like (ie blue button, red button):\r\n\r\n```\r\n                          .------------.\r\n       .--------.         |  snapshot  |       periodic job\r\n       | Bandit | <------ |    file    | <---  aggregates logs\r\n       .--------.         .------------.       into counters\r\n           ^\r\n           |\r\n      .------------.       .----------.\r\n      | Experiment | --*-> |  Variant |\r\n      .------------.       .----------.\r\n      | name       |       | tag      |\r\n      .------------.       | url      |\r\n                           .----------.\r\n```\r\n\r\n## Running experiments\r\n\r\nTo use a bandit, you first have to define an experiment and it's variants.\r\nThis is currently configured as a TSV with name, url, tag. See experiments.tsv\r\nfor an example.\r\n\r\nChoose the best integration for your project depending on whether you have\r\na client side javascript application, a go project, or a project in some other\r\nlanguage.\r\n\r\n### Javascript and the HTTP API\r\n\r\nRun `bandit-api -port 80 -apiExperiments experiments.tsv` to start the\r\nendpoint with the provided test experiments.\r\n\r\nIn this scenario, the application makes a request to the api endpoint and\r\nthen a second request to your api.\r\n\r\n```\r\n   .--------------.        .--------------------------.\r\n   |  javascript  | -----> | bandit HTTP API (select) |\r\n   .--------------.        .--------------------------.\r\n          |                .------------.\r\n          ---------------> |  your API  |\r\n          |                .------------.\r\n          |                .---------------------------.\r\n          ---------------> |  bandit HTTP API (reward) |\r\n                           .---------------------------.\r\n```\r\n\r\nGet a variant from the HTTP API first:\r\n\r\n    GET https://api/experiements/widgets?uid=11 HTTP/1.0\r\n\r\nThe API responds with a variant:\r\n\r\n    HTTP/1.0 200 OK\r\n    Content-Type: text/json\r\n\r\n    {\r\n      uid: 11,\r\n      experiment: \"widgets\",\r\n      url: \"https://api/widget?color=blue\"\r\n      tag: \"widget-sauce-flf89\"\r\n    }\r\n\r\nThe client can now follow up with a request to the returned widget:\r\n\r\n    GET https://api/widget?color=blue HTTP/1.0\r\n\r\nSee the exampe binary and example/index.html for a running example of this.\r\n\r\n### Project in another language using the HTTP API\r\n\r\nLaunch the HTTP API as above. When you get a request to your endpoint, make\r\na backend request to the HTTP API. Use the returned variant to vary.\r\n\r\n### Running experiments in go with the bandit library\r\n\r\nIntegrate with as follows:\r\n\r\n1. Load an experiment.\r\n2. Initialize your own variant code if necessary.\r\n3. Serve. In each request, select a variant with the experiment and serve it.\r\n\r\nYou can load an experiment with an associated bandit as an Experiment:\r\n\r\n```go\r\nes, err := bandit.NewExperiments(*apiExperiments)\r\nif err != nil {\r\n  log.Fatalf(\"could not construct experiments: %s\", err.Error())\r\n}\r\n\r\nopener := bandit.NewFileOpener(*apiSnapshot)\r\nif err := es.InitDelayedBandit(opener, *apiSnaphotPoll); err != nil {\r\n  log.Fatalf(\"could initialize bandits: %s\", err.Error())\r\n}\r\n\r\nm := pat.New()\r\nm.Get(\"/experiments/:name\", http.HandlerFunc(bhttp.SelectionHandler(es, *apiPinTTL)))\r\nhttp.Handle(\"/\", m)\r\n\r\n// serve\r\nlog.Fatal(http.ListenAndServe(*apiBind, nil))\r\n```\r\n\r\nYou can iterate over available Variants in your endpoint setup via\r\nt.Experiment.Variants. Use this to intialize your viariants, or just switch:\r\n\r\n```\r\nvar msg string\r\nswitch t.Select().Tag {\r\n  case \"shape-20130822:1\":\r\n    msg = \"hello square\"\r\n  case \"shape-20130822:2\":\r\n    msg = \"hello circle\"\r\n}\r\n```\r\n\r\nYour response must include the Tag somwhere so the client can tag subsequent\r\nrewards. If you do not do this, you will not be able to calculate rewards.\r\n\r\n## Bandit Algorithms\r\n\r\nYou can currently choose between Epsilon Greedy, UCB1 and Softmax. See the\r\ngodoc for detailed information.\r\n\r\n## Simulation\r\n\r\nThe `bandit/sim` package includes the facility to simulate and plot\r\nexperiemnts. You should run your own simulations before putting experiments\r\ninto production. See the sim package for details. You can run bandit-plot\r\nto see some out of the box simulations.\r\n\r\n# Status\r\n\r\nVersion: 0.0.0-alpha.1\r\n\r\nThe API is currently *not stable* and is subject to change at any time.\r\n\r\n## TODO\r\n\r\n- UCB with extensions for delayed rewards\r\n- Sticky assignements\r\n\r\n# Credits\r\n\r\nDeveloped by\r\n\r\n- Rany Keddo (@purzelrakete)\r\n\r\nThanks to for advice and opinions to\r\n\r\n- John Myles White\r\n- Josh Devins\r\n- Ozg√ºr Demir\r\n- Peter Bourgon\r\n- Sean Braithwaite\r\n\r\n[1]: http://dl.acm.org/citation.cfm?id=1677012\" \"Explore/Exploit Schemes for Web Content Optimzation\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}